data = pd.read_csv("/content/finalBorrower_Payment_History.csv") #reads the content 

data.shape

data.head()

data.info() 

data['CONDITION'].value_counts(normalize = True)

print(data["CONDITION"].value_counts())

plt.figure(figsize = (22,6))
sns.countplot(x = 'REPAYMENT_FREQUENCY', hue = 'CONDITION', data = data)

plt.figure(figsize = (60,6))
sns.countplot(x = 'NUMBER_OF_INSTALLMENTS', hue = 'CONDITION', data = data)

plt.figure(figsize = (12,6))
sns.boxplot(x = 'CONDITION', y ='NUMBER_OF_INSTALLMENTS', data = data, showfliers = False)

sns.set_style("whitegrid")
sns.boxplot(x = 'CONDITION', y = 'NUMBER_OF_INSTALLMENTS', data = data)

sns.set_style("whitegrid")
sns.boxplot(x = 'CONDITION', y = 'SANCTION_AMT', data = data)

sns.set_style("whitegrid")
sns.boxplot(x = 'CONDITION', y = 'TOT_OUTSTD_BAL', data = data)

sns.scatterplot(x="CONDITION", y="OVER_DUE_AMT", data=data)

sns.lineplot(x="CONDITION", y="OVER_DUE_AMT", data=data)

plt.figure(figsize = (22,6))
sns.countplot(x = 'INSTALMENT_LOAN_TYPE', hue = 'CONDITION', data = data)

plt.figure(figsize = (22,6))
sns.countplot(x = 'loan_status', hue = 'CONDITION', data = data)

sns.lineplot(x="CONDITION", y="NO_OF_DAYS_PAST_DUE", data=data)

sns.set_style("whitegrid")
sns.boxplot(x = 'CONDITION', y = 'NO_OF_DAYS_PAST_DUE', data = data)

condition = data['currency_code'] == 'USD'
columns_to_multiply = ['SANCTION_AMT', 'TOT_OUTSTD_BAL','OVER_DUE_AMT','AMOUNT_OF_INSTALLMENT']
constant = 2526
data.loc[condition, columns_to_multiply] *= constant
data['currency_code'].replace(['USD'], ['TZS'], inplace=True)

data.corr()

data = data.drop(columns=['ASSET_CLASSIFICATION'])
data = data.drop(columns=['REASON_FOR_CLOSURE'])
data = data.drop(columns=['LOAN_TENURE'])
data = data.drop(columns=['LAST_AMOUNT_PAID'])
data = data.drop(columns=['DATE_LATEST_PAY_RECEIVED'])
data = data.drop(columns=['DATE_ACC_CLOSE'])

duplicate_values = data['REPAYMENT_FREQUENCY'].duplicated()
print(duplicate_values)

#Remove null values
data = data.sort_values(by='SANCTION_AMT')
#Not best method:
data['NUMBER_OF_INSTALLMENTS'].fillna(data['NUMBER_OF_INSTALLMENTS'].mean(), inplace=True)
data['REPAYMENT_FREQUENCY'].fillna(data['REPAYMENT_FREQUENCY'].mode()[0], inplace=True)
data['TOT_OUTSTD_BAL'].fillna(0, inplace=True)
data['AMOUNT_OF_INSTALLMENT'].fillna(data['AMOUNT_OF_INSTALLMENT'].mean(), inplace=True)
data['INSTALMENT_LOAN_TYPE'].fillna(data['INSTALMENT_LOAN_TYPE'].mode()[0], inplace=True)

data['DATE_ACC_OPEN'] = pd.to_datetime(data['DATE_ACC_OPEN'], format='%d-%b-%y')
data['EXPECTED_END_DATE_OF_LOAN'] = pd.to_datetime(data['EXPECTED_END_DATE_OF_LOAN'], format='%d-%b-%y')
data['Date_Difference'] = data['EXPECTED_END_DATE_OF_LOAN'] - data['DATE_ACC_OPEN']
data['Expected_Difference_Days'] = data['Date_Difference'].dt.days
#data = pd.get_dummies(data, columns=['INSTALMENT_LOAN_TYPE'], prefix='TYPE')

data['DATE_ACC_OPEN'] = pd.to_datetime(data['DATE_ACC_OPEN'], format='%d-%b-%y')

data['EXPECTED_END_DATE_OF_LOAN'] = pd.to_datetime(data['EXPECTED_END_DATE_OF_LOAN'], format='%d-%b-%y')

data['Date_Difference'] = data['EXPECTED_END_DATE_OF_LOAN'] - data['DATE_ACC_OPEN']
data['Expected_Difference_Days'] = data['Date_Difference'].dt.days
#data = pd.get_dummies(data, columns=['INSTALMENT_LOAN_TYPE'], prefix='TYPE')

data.info()

cols_to_encode = ['REPAYMENT_FREQUENCY', 'INSTALMENT_LOAN_TYPE']
data = pd.get_dummies(data = data, columns = cols_to_encode, drop_first = False)

data.info()

data=data.drop(['INSTALMENT_LOAN_TYPE_LineOfCreditOnCurrentAccount'], axis='columns')

print(data["REPAYMENT_FREQUENCY_AtTheFinalDayOfThePeriodOfContract"].value_counts())

print(data["REPAYMENT_FREQUENCY_FortnightlyInstalments15Days"].value_counts())

print(data["REPAYMENT_FREQUENCY_IrregularInstalments"].value_counts())

print(data["REPAYMENT_FREQUENCY_MonthlyInstalments30Days"].value_counts())

print(data["REPAYMENT_FREQUENCY_SixMonthInstalments180Days"].value_counts())

data=data.drop(['REPAYMENT_FREQUENCY_SixMonthInstalments180Days'], axis='columns')

data=data.drop(['currency_code'], axis='columns')

data['DATE_ACC_OPEN'] = pd.to_datetime(data['DATE_ACC_OPEN'])
data['EXPECTED_END_DATE_OF_LOAN'] = pd.to_datetime(data['EXPECTED_END_DATE_OF_LOAN'])

label_encoder = preprocessing.LabelEncoder()
data['CONDITION']= label_encoder.fit_transform(data['CONDITION'])

data = data.dropna(axis = 0, how ='any')

plt.figure(figsize=(13,13))
sns.heatmap(data.corr().round(2),annot=True,vmin=-1,vmax=1,center=0,cmap='vlag')

matrix=data.corr().round(2)
mask=np.triu(np.ones_like(matrix, dtype=bool))
mask

plt.figure(figsize=(13,13))
sns.heatmap(matrix, annot=True, vmax=1,vmin=-1,cmap='vlag',mask = mask)

Z= data[["Expected_Difference_Days",
"REPAYMENT_FREQUENCY_AnnualInstalments360Days",
"REPAYMENT_FREQUENCY_AtTheFinalDayOfThePeriodOfContract",
"REPAYMENT_FREQUENCY_FortnightlyInstalments15Days",
"REPAYMENT_FREQUENCY_IrregularInstalments",
"REPAYMENT_FREQUENCY_MonthlyInstalments30Days",
"INSTALMENT_LOAN_TYPE_BusinessLoan",
"INSTALMENT_LOAN_TYPE_ConsumerLoan",
"INSTALMENT_LOAN_TYPE_CreditCard",
"INSTALMENT_LOAN_TYPE_LeasingFinancial",
"INSTALMENT_LOAN_TYPE_MortgageLoan",
"INSTALMENT_LOAN_TYPE_OtherInstalmentOperation",
"INSTALMENT_LOAN_TYPE_Overdraft",
"CONDITION"]]

print(data["CONDITION"].value_counts())

le=Z[Z["CONDITION"]== 0]
lne=Z[Z["CONDITION"]== 1]
lne.shape

lne_upsample = resample(lne,
             replace=True,
             n_samples=len(le),
             random_state=42)

print(lne_upsample.shape)

data_new = pd.concat([le, lne_upsample])
data_new.shape

data_new.info()

X= data_new[["Expected_Difference_Days",
"REPAYMENT_FREQUENCY_AnnualInstalments360Days",
"REPAYMENT_FREQUENCY_AtTheFinalDayOfThePeriodOfContract",
"REPAYMENT_FREQUENCY_FortnightlyInstalments15Days",
"REPAYMENT_FREQUENCY_IrregularInstalments",
"REPAYMENT_FREQUENCY_MonthlyInstalments30Days",
"INSTALMENT_LOAN_TYPE_BusinessLoan",
"INSTALMENT_LOAN_TYPE_ConsumerLoan",
"INSTALMENT_LOAN_TYPE_CreditCard",
"INSTALMENT_LOAN_TYPE_LeasingFinancial",
"INSTALMENT_LOAN_TYPE_MortgageLoan",
"INSTALMENT_LOAN_TYPE_OtherInstalmentOperation",
"INSTALMENT_LOAN_TYPE_Overdraft"]]
Y= data_new[["CONDITION"]]
